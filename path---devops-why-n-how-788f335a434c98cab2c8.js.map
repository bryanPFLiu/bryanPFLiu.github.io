{"version":3,"sources":["webpack:///path---devops-why-n-how-788f335a434c98cab2c8.js","webpack:///./.cache/json/devops-why-n-how.json"],"names":["webpackJsonp","779","module","exports","data","post","id","html","htmlAst","type","children","tagName","properties","value","href","target","quirksMode","fields","slug","prefix","frontmatter","title","subTitle","cover","childImageSharp","resize","src","author","footnote","site","siteMetadata","facebook","appId","pathContext"],"mappings":"AAAAA,cAAc,gBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,MAAQC,GAAA,mLAAAC,KAAA,4qDAAAC,SAAw4DC,KAAA,OAAAC,WAA2BD,KAAA,UAAAE,QAAA,KAAAC,cAA+CF,WAAcD,KAAA,OAAAI,MAAA,wBAA8CJ,KAAA,OAAAI,MAAA,OAA6BJ,KAAA,UAAAE,QAAA,KAAAC,cAA+CF,WAAcD,KAAA,OAAAI,MAAA,gBAAsCJ,KAAA,OAAAI,MAAA,OAA6BJ,KAAA,UAAAE,QAAA,IAAAC,cAA8CF,WAAcD,KAAA,OAAAI,MAAA,qBAA2CJ,KAAA,UAAAE,QAAA,IAAAC,YAA6CE,KAAA,uCAAAC,OAAA,UAAgEL,WAAcD,KAAA,OAAAI,MAAA,gBAAsCJ,KAAA,OAAAI,MAAA,MAA4BJ,KAAA,UAAAE,QAAA,IAAAC,YAA6CE,KAAA,mCAAAC,OAAA,UAA4DL,WAAcD,KAAA,OAAAI,MAAA,mBAAyCJ,KAAA,OAAAI,MAAA,4CAAkEJ,KAAA,OAAAI,MAAA,OAA6BJ,KAAA,UAAAE,QAAA,aAAAC,cAAuDF,WAAcD,KAAA,OAAAI,MAAA,OAA6BJ,KAAA,UAAAE,QAAA,IAAAC,cAA8CF,WAAcD,KAAA,OAAAI,MAAA,8UAAoWJ,KAAA,UAAAE,QAAA,IAAAC,YAA6CE,KAAA,kCAAAC,OAAA,UAA2DL,WAAcD,KAAA,OAAAI,MAAA,6BAAmDJ,KAAA,OAAAI,MAAA,SAA+BJ,KAAA,OAAAI,MAAA,OAA6BJ,KAAA,UAAAE,QAAA,IAAAC,cAA8CF,WAAcD,KAAA,OAAAI,MAAA,0DAAgFJ,KAAA,UAAAE,QAAA,IAAAC,YAA6CE,KAAA,uDAAAC,OAAA,UAAgFL,WAAcD,KAAA,OAAAI,MAAA,2BAAiDJ,KAAA,OAAAI,MAAA,oCAA0DJ,KAAA,OAAAI,MAAA,OAA6BJ,KAAA,UAAAE,QAAA,KAAAC,cAA+CF,WAAcD,KAAA,OAAAI,MAAA,gBAAsCJ,KAAA,OAAAI,MAAA,OAA6BJ,KAAA,UAAAE,QAAA,IAAAC,cAA8CF,WAAcD,KAAA,OAAAI,MAAA,mGAAyHJ,KAAA,UAAAE,QAAA,IAAAC,YAA6CE,KAAA,SAAeJ,WAAcD,KAAA,OAAAI,MAAA,UAAgCJ,KAAA,OAAAI,MAAA,+DAAqFJ,KAAA,UAAAE,QAAA,OAAAC,cAAiDF,WAAcD,KAAA,OAAAI,MAAA,0BAAgDJ,KAAA,OAAAI,MAAA,qGAA2HJ,KAAA,OAAAI,MAAA,OAA6BJ,KAAA,UAAAE,QAAA,IAAAC,cAA8CF,WAAcD,KAAA,OAAAI,MAAA,4OAAkQJ,KAAA,OAAAI,MAAA,OAA6BJ,KAAA,UAAAE,QAAA,aAAAC,cAAuDF,WAAcD,KAAA,OAAAI,MAAA,OAA6BJ,KAAA,UAAAE,QAAA,IAAAC,cAA8CF,WAAcD,KAAA,OAAAI,MAAA,+CAAqEJ,KAAA,OAAAI,MAAA,SAA+BJ,KAAA,OAAAI,MAAA,OAA6BJ,KAAA,UAAAE,QAAA,IAAAC,cAA8CF,WAAcD,KAAA,OAAAI,MAAA,0JAA8KT,MAAUY,YAAA,IAAoBC,QAAWC,KAAA,qBAAAC,OAAA,cAAkDC,aAAgBC,MAAA,qBAAAC,SAAA,mBAAAC,OAAoEC,iBAAmBC,QAAUC,IAAA,iFAAsFC,QAAWrB,GAAA,uJAAAC,KAAA,ikBAAquBqB,UAAatB,GAAA,yJAAAC,KAAA,IAAwKsB,MAASC,cAAgBC,UAAYC,MAAA,uBAA8BC,aAAgBf,KAAA","file":"path---devops-why-n-how-788f335a434c98cab2c8.js","sourcesContent":["webpackJsonp([2988873844765],{\n\n/***/ 779:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"post\":{\"id\":\"/Users/liubryan/Library/Mobile Documents/com~apple~CloudDocs/sharing/bryanPFLiu.github.io/content/posts/2019-12-17--devops-why-n-how/index.md absPath of file >>> MarkdownRemark\",\"html\":\"<h1>DevOps十年了，你，想改變了嗎</h1>\\n<h2>何謂 DevOps</h2>\\n<p>DevOps 有太多的定義比如：<a href=\\\"https://zh.wikipedia.org/wiki/DevOps\\\" target=\\\"_blank\\\">Wikipedia</a>、<a href=\\\"https://cloud.google.com/devops/\\\" target=\\\"_blank\\\">Google Cloud</a>，這些都表達得很好，但我更喜歡從開發（CI/CD）的角度來講這件事，比如：</p>\\n<blockquote>\\n<p>Continuous Delivery is the ability to get changes of all types … into production, or into the hands of users, safely and quickly in a sustainable way. … We achieve all this by ensuring our code is always in a deployable state … thus completely eliminate the integration, testing and hardening phases … as well as code freezes. ~ <a href=\\\"https://continuousdelivery.com/\\\" target=\\\"_blank\\\"> Continuous Delivery</a></p>\\n</blockquote>\\n<p>要完成這樣的轉變（digital transformation）, 當中\\b包含了不同類別的各項技能之養成<a href=\\\"https://cloud.google.com/devops/#devops-capabilities\\\" target=\\\"_blank\\\"> DevOps capabilities</a> ，但是在這之前，最難的還是要讓團隊了解及接受改變的必要…</p>\\n<h2>為何改變是必需的？</h2>\\n<p>好了，的確有另一些方法可以讓（軟體）開發更快、品質更好、更穩定等等。但我們現也做得不錯，也是能夠固定時間交付客戶所需要的功能，那我還需要改變嗎？？ 這邊就提到了持續改善的重要性，拿Uber<a href=\\\"#ref1\\\">[1]</a>來說，它的商業模式並沒有太多改變，但其架構每兩年就大改一次，這改變不外乎是為了架構能容易擴展（scale out）及<mark>當團隊快速增長時還能維持一樣的開發效率</mark>。企業的起起落落，尤其是IT產業，當改變是被迫時，往往競爭者已攻城掠地，這時改變是壓力很大的，相反的，隨時都能持續改善，反而可以享受著指標數字隨著做為改變而不斷改進的成就感，兩者相差甚巨！</p>\\n<p>當初 IBM 及微軟內部第一次在推動 DevOps 改造時就是發生在協作軟件的部門（Lotus Notes and MS Office），也正是 Google 的 Gmail[2] 等快速地被企業及個人採用後，兩家公司發現當他們還在以每季度在更新軟件時，Google 卻是每天都能更版甚至使用 A/B Testing 的方法在快速反應使用者的回饋。 結果是 MS Office 轉型後且上了雲端似乎帶來更好的結果，但 IBM 卻退出了企業協作軟件的市場 …。</p>\\n<blockquote>\\n<p>快速變動的行業裡，大家早就應該了解到，沒有改變的風險跟改變本身的風險是一樣高的！</p>\\n</blockquote>\\n<p>從十年前的第一場DevOpsDays, Belgium, 2009，到傳統軟體公司想改變時已經是將近五年後的事，但在DevOps滿十年後的今天，你，想要變了嗎？當共享軟体當道，商業模式容易被複製，只要灑錢暫時也能雇用到不錯的工程師，所以長遠來看，企業的差異性與競爭力大概就只剩下企業文化與效率。</p>\",\"htmlAst\":{\"type\":\"root\",\"children\":[{\"type\":\"element\",\"tagName\":\"h1\",\"properties\":{},\"children\":[{\"type\":\"text\",\"value\":\"DevOps十年了，你，想改變了嗎\"}]},{\"type\":\"text\",\"value\":\"\\n\"},{\"type\":\"element\",\"tagName\":\"h2\",\"properties\":{},\"children\":[{\"type\":\"text\",\"value\":\"何謂 DevOps\"}]},{\"type\":\"text\",\"value\":\"\\n\"},{\"type\":\"element\",\"tagName\":\"p\",\"properties\":{},\"children\":[{\"type\":\"text\",\"value\":\"DevOps 有太多的定義比如：\"},{\"type\":\"element\",\"tagName\":\"a\",\"properties\":{\"href\":\"https://zh.wikipedia.org/wiki/DevOps\",\"target\":\"_blank\"},\"children\":[{\"type\":\"text\",\"value\":\"Wikipedia\"}]},{\"type\":\"text\",\"value\":\"、\"},{\"type\":\"element\",\"tagName\":\"a\",\"properties\":{\"href\":\"https://cloud.google.com/devops/\",\"target\":\"_blank\"},\"children\":[{\"type\":\"text\",\"value\":\"Google Cloud\"}]},{\"type\":\"text\",\"value\":\"，這些都表達得很好，但我更喜歡從開發（CI/CD）的角度來講這件事，比如：\"}]},{\"type\":\"text\",\"value\":\"\\n\"},{\"type\":\"element\",\"tagName\":\"blockquote\",\"properties\":{},\"children\":[{\"type\":\"text\",\"value\":\"\\n\"},{\"type\":\"element\",\"tagName\":\"p\",\"properties\":{},\"children\":[{\"type\":\"text\",\"value\":\"Continuous Delivery is the ability to get changes of all types … into production, or into the hands of users, safely and quickly in a sustainable way. … We achieve all this by ensuring our code is always in a deployable state … thus completely eliminate the integration, testing and hardening phases … as well as code freezes. ~ \"},{\"type\":\"element\",\"tagName\":\"a\",\"properties\":{\"href\":\"https://continuousdelivery.com/\",\"target\":\"_blank\"},\"children\":[{\"type\":\"text\",\"value\":\" Continuous Delivery\"}]}]},{\"type\":\"text\",\"value\":\"\\n\"}]},{\"type\":\"text\",\"value\":\"\\n\"},{\"type\":\"element\",\"tagName\":\"p\",\"properties\":{},\"children\":[{\"type\":\"text\",\"value\":\"要完成這樣的轉變（digital transformation）, 當中\\b包含了不同類別的各項技能之養成\"},{\"type\":\"element\",\"tagName\":\"a\",\"properties\":{\"href\":\"https://cloud.google.com/devops/#devops-capabilities\",\"target\":\"_blank\"},\"children\":[{\"type\":\"text\",\"value\":\" DevOps capabilities\"}]},{\"type\":\"text\",\"value\":\" ，但是在這之前，最難的還是要讓團隊了解及接受改變的必要…\"}]},{\"type\":\"text\",\"value\":\"\\n\"},{\"type\":\"element\",\"tagName\":\"h2\",\"properties\":{},\"children\":[{\"type\":\"text\",\"value\":\"為何改變是必需的？\"}]},{\"type\":\"text\",\"value\":\"\\n\"},{\"type\":\"element\",\"tagName\":\"p\",\"properties\":{},\"children\":[{\"type\":\"text\",\"value\":\"好了，的確有另一些方法可以讓（軟體）開發更快、品質更好、更穩定等等。但我們現也做得不錯，也是能夠固定時間交付客戶所需要的功能，那我還需要改變嗎？？ 這邊就提到了持續改善的重要性，拿Uber\"},{\"type\":\"element\",\"tagName\":\"a\",\"properties\":{\"href\":\"#ref1\"},\"children\":[{\"type\":\"text\",\"value\":\"[1]\"}]},{\"type\":\"text\",\"value\":\"來說，它的商業模式並沒有太多改變，但其架構每兩年就大改一次，這改變不外乎是為了架構能容易擴展（scale out）及\"},{\"type\":\"element\",\"tagName\":\"mark\",\"properties\":{},\"children\":[{\"type\":\"text\",\"value\":\"當團隊快速增長時還能維持一樣的開發效率\"}]},{\"type\":\"text\",\"value\":\"。企業的起起落落，尤其是IT產業，當改變是被迫時，往往競爭者已攻城掠地，這時改變是壓力很大的，相反的，隨時都能持續改善，反而可以享受著指標數字隨著做為改變而不斷改進的成就感，兩者相差甚巨！\"}]},{\"type\":\"text\",\"value\":\"\\n\"},{\"type\":\"element\",\"tagName\":\"p\",\"properties\":{},\"children\":[{\"type\":\"text\",\"value\":\"當初 IBM 及微軟內部第一次在推動 DevOps 改造時就是發生在協作軟件的部門（Lotus Notes and MS Office），也正是 Google 的 Gmail[2] 等快速地被企業及個人採用後，兩家公司發現當他們還在以每季度在更新軟件時，Google 卻是每天都能更版甚至使用 A/B Testing 的方法在快速反應使用者的回饋。 結果是 MS Office 轉型後且上了雲端似乎帶來更好的結果，但 IBM 卻退出了企業協作軟件的市場 …。\"}]},{\"type\":\"text\",\"value\":\"\\n\"},{\"type\":\"element\",\"tagName\":\"blockquote\",\"properties\":{},\"children\":[{\"type\":\"text\",\"value\":\"\\n\"},{\"type\":\"element\",\"tagName\":\"p\",\"properties\":{},\"children\":[{\"type\":\"text\",\"value\":\"快速變動的行業裡，大家早就應該了解到，沒有改變的風險跟改變本身的風險是一樣高的！\"}]},{\"type\":\"text\",\"value\":\"\\n\"}]},{\"type\":\"text\",\"value\":\"\\n\"},{\"type\":\"element\",\"tagName\":\"p\",\"properties\":{},\"children\":[{\"type\":\"text\",\"value\":\"從十年前的第一場DevOpsDays, Belgium, 2009，到傳統軟體公司想改變時已經是將近五年後的事，但在DevOps滿十年後的今天，你，想要變了嗎？當共享軟体當道，商業模式容易被複製，只要灑錢暫時也能雇用到不錯的工程師，所以長遠來看，企業的差異性與競爭力大概就只剩下企業文化與效率。\"}]}],\"data\":{\"quirksMode\":false}},\"fields\":{\"slug\":\"/devops-why-n-how/\",\"prefix\":\"2019-12-17\"},\"frontmatter\":{\"title\":\"DevOps十年了，你，想改變了嗎？\",\"subTitle\":\"DevOps Why & How\",\"cover\":{\"childImageSharp\":{\"resize\":{\"src\":\"/static/Shfit_left_right-cover-e68ec076c43288ed22ceb7397d5e1d29-160fa.png\"}}}}},\"author\":{\"id\":\"/Users/liubryan/Library/Mobile Documents/com~apple~CloudDocs/sharing/bryanPFLiu.github.io/content/parts/author.md absPath of file >>> MarkdownRemark\",\"html\":\"<p><strong>Mr. Liu</strong>’s <a href=\\\"/\\\">home</a> 💖:</p>\\n<h2>前言</h2>\\n<p>把想法寫出來，其實想了很久…，總是覺得網路上已有這麼多好文可以看，為何還需要再多寫，況且寫了後又有多少人要看呢？心中想講的東西，其實在現實上認同且願意實踐者少之又少。\\n最初的想法還是希望這些東西對於社群能有些貢獻跟正面的影響罷了，所以最後堅定自己的道路與想法來自於葛拉漢（Benjamin Graham）的名言：『是對是錯，跟他人是否認同一點關係也沒有，你的對錯只跟你的資料和邏輯推理是否正確有關。』</p>\\n<blockquote>\\n<p>卓越，是一種選擇。</p>\\n</blockquote>\\n<p>《從 A 到 A ＋》書的結尾說到：『做到卓越不見得比做到優秀困難，反而可以少吃點苦頭，累積的動能會注入更多的能量，持續維持在平庸將不斷耗掉能量，新注入的能量卻很少。』\\n這的確也是寫在後面的一些方法論實踐後所帶來的感想，這些技巧都是那些卓越公司（Facebook、Amazon、Netflix、Google 和 Microsoft 等）所注重的，但在一般的公司卻認為可有可無：反正我這樣做還是可以交付成果！殊不知這中間的效率差了多倍有餘，或許這也是獨角獸與馬匹的差異吧～</p>\"},\"footnote\":{\"id\":\"/Users/liubryan/Library/Mobile Documents/com~apple~CloudDocs/sharing/bryanPFLiu.github.io/content/parts/footnote.md absPath of file >>> MarkdownRemark\",\"html\":\"\"},\"site\":{\"siteMetadata\":{\"facebook\":{\"appId\":\"2767463339978769\"}}}},\"pathContext\":{\"slug\":\"/devops-why-n-how/\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---devops-why-n-how-788f335a434c98cab2c8.js","module.exports = {\"data\":{\"post\":{\"id\":\"/Users/liubryan/Library/Mobile Documents/com~apple~CloudDocs/sharing/bryanPFLiu.github.io/content/posts/2019-12-17--devops-why-n-how/index.md absPath of file >>> MarkdownRemark\",\"html\":\"<h1>DevOps十年了，你，想改變了嗎</h1>\\n<h2>何謂 DevOps</h2>\\n<p>DevOps 有太多的定義比如：<a href=\\\"https://zh.wikipedia.org/wiki/DevOps\\\" target=\\\"_blank\\\">Wikipedia</a>、<a href=\\\"https://cloud.google.com/devops/\\\" target=\\\"_blank\\\">Google Cloud</a>，這些都表達得很好，但我更喜歡從開發（CI/CD）的角度來講這件事，比如：</p>\\n<blockquote>\\n<p>Continuous Delivery is the ability to get changes of all types … into production, or into the hands of users, safely and quickly in a sustainable way. … We achieve all this by ensuring our code is always in a deployable state … thus completely eliminate the integration, testing and hardening phases … as well as code freezes. ~ <a href=\\\"https://continuousdelivery.com/\\\" target=\\\"_blank\\\"> Continuous Delivery</a></p>\\n</blockquote>\\n<p>要完成這樣的轉變（digital transformation）, 當中\\b包含了不同類別的各項技能之養成<a href=\\\"https://cloud.google.com/devops/#devops-capabilities\\\" target=\\\"_blank\\\"> DevOps capabilities</a> ，但是在這之前，最難的還是要讓團隊了解及接受改變的必要…</p>\\n<h2>為何改變是必需的？</h2>\\n<p>好了，的確有另一些方法可以讓（軟體）開發更快、品質更好、更穩定等等。但我們現也做得不錯，也是能夠固定時間交付客戶所需要的功能，那我還需要改變嗎？？ 這邊就提到了持續改善的重要性，拿Uber<a href=\\\"#ref1\\\">[1]</a>來說，它的商業模式並沒有太多改變，但其架構每兩年就大改一次，這改變不外乎是為了架構能容易擴展（scale out）及<mark>當團隊快速增長時還能維持一樣的開發效率</mark>。企業的起起落落，尤其是IT產業，當改變是被迫時，往往競爭者已攻城掠地，這時改變是壓力很大的，相反的，隨時都能持續改善，反而可以享受著指標數字隨著做為改變而不斷改進的成就感，兩者相差甚巨！</p>\\n<p>當初 IBM 及微軟內部第一次在推動 DevOps 改造時就是發生在協作軟件的部門（Lotus Notes and MS Office），也正是 Google 的 Gmail[2] 等快速地被企業及個人採用後，兩家公司發現當他們還在以每季度在更新軟件時，Google 卻是每天都能更版甚至使用 A/B Testing 的方法在快速反應使用者的回饋。 結果是 MS Office 轉型後且上了雲端似乎帶來更好的結果，但 IBM 卻退出了企業協作軟件的市場 …。</p>\\n<blockquote>\\n<p>快速變動的行業裡，大家早就應該了解到，沒有改變的風險跟改變本身的風險是一樣高的！</p>\\n</blockquote>\\n<p>從十年前的第一場DevOpsDays, Belgium, 2009，到傳統軟體公司想改變時已經是將近五年後的事，但在DevOps滿十年後的今天，你，想要變了嗎？當共享軟体當道，商業模式容易被複製，只要灑錢暫時也能雇用到不錯的工程師，所以長遠來看，企業的差異性與競爭力大概就只剩下企業文化與效率。</p>\",\"htmlAst\":{\"type\":\"root\",\"children\":[{\"type\":\"element\",\"tagName\":\"h1\",\"properties\":{},\"children\":[{\"type\":\"text\",\"value\":\"DevOps十年了，你，想改變了嗎\"}]},{\"type\":\"text\",\"value\":\"\\n\"},{\"type\":\"element\",\"tagName\":\"h2\",\"properties\":{},\"children\":[{\"type\":\"text\",\"value\":\"何謂 DevOps\"}]},{\"type\":\"text\",\"value\":\"\\n\"},{\"type\":\"element\",\"tagName\":\"p\",\"properties\":{},\"children\":[{\"type\":\"text\",\"value\":\"DevOps 有太多的定義比如：\"},{\"type\":\"element\",\"tagName\":\"a\",\"properties\":{\"href\":\"https://zh.wikipedia.org/wiki/DevOps\",\"target\":\"_blank\"},\"children\":[{\"type\":\"text\",\"value\":\"Wikipedia\"}]},{\"type\":\"text\",\"value\":\"、\"},{\"type\":\"element\",\"tagName\":\"a\",\"properties\":{\"href\":\"https://cloud.google.com/devops/\",\"target\":\"_blank\"},\"children\":[{\"type\":\"text\",\"value\":\"Google Cloud\"}]},{\"type\":\"text\",\"value\":\"，這些都表達得很好，但我更喜歡從開發（CI/CD）的角度來講這件事，比如：\"}]},{\"type\":\"text\",\"value\":\"\\n\"},{\"type\":\"element\",\"tagName\":\"blockquote\",\"properties\":{},\"children\":[{\"type\":\"text\",\"value\":\"\\n\"},{\"type\":\"element\",\"tagName\":\"p\",\"properties\":{},\"children\":[{\"type\":\"text\",\"value\":\"Continuous Delivery is the ability to get changes of all types … into production, or into the hands of users, safely and quickly in a sustainable way. … We achieve all this by ensuring our code is always in a deployable state … thus completely eliminate the integration, testing and hardening phases … as well as code freezes. ~ \"},{\"type\":\"element\",\"tagName\":\"a\",\"properties\":{\"href\":\"https://continuousdelivery.com/\",\"target\":\"_blank\"},\"children\":[{\"type\":\"text\",\"value\":\" Continuous Delivery\"}]}]},{\"type\":\"text\",\"value\":\"\\n\"}]},{\"type\":\"text\",\"value\":\"\\n\"},{\"type\":\"element\",\"tagName\":\"p\",\"properties\":{},\"children\":[{\"type\":\"text\",\"value\":\"要完成這樣的轉變（digital transformation）, 當中\\b包含了不同類別的各項技能之養成\"},{\"type\":\"element\",\"tagName\":\"a\",\"properties\":{\"href\":\"https://cloud.google.com/devops/#devops-capabilities\",\"target\":\"_blank\"},\"children\":[{\"type\":\"text\",\"value\":\" DevOps capabilities\"}]},{\"type\":\"text\",\"value\":\" ，但是在這之前，最難的還是要讓團隊了解及接受改變的必要…\"}]},{\"type\":\"text\",\"value\":\"\\n\"},{\"type\":\"element\",\"tagName\":\"h2\",\"properties\":{},\"children\":[{\"type\":\"text\",\"value\":\"為何改變是必需的？\"}]},{\"type\":\"text\",\"value\":\"\\n\"},{\"type\":\"element\",\"tagName\":\"p\",\"properties\":{},\"children\":[{\"type\":\"text\",\"value\":\"好了，的確有另一些方法可以讓（軟體）開發更快、品質更好、更穩定等等。但我們現也做得不錯，也是能夠固定時間交付客戶所需要的功能，那我還需要改變嗎？？ 這邊就提到了持續改善的重要性，拿Uber\"},{\"type\":\"element\",\"tagName\":\"a\",\"properties\":{\"href\":\"#ref1\"},\"children\":[{\"type\":\"text\",\"value\":\"[1]\"}]},{\"type\":\"text\",\"value\":\"來說，它的商業模式並沒有太多改變，但其架構每兩年就大改一次，這改變不外乎是為了架構能容易擴展（scale out）及\"},{\"type\":\"element\",\"tagName\":\"mark\",\"properties\":{},\"children\":[{\"type\":\"text\",\"value\":\"當團隊快速增長時還能維持一樣的開發效率\"}]},{\"type\":\"text\",\"value\":\"。企業的起起落落，尤其是IT產業，當改變是被迫時，往往競爭者已攻城掠地，這時改變是壓力很大的，相反的，隨時都能持續改善，反而可以享受著指標數字隨著做為改變而不斷改進的成就感，兩者相差甚巨！\"}]},{\"type\":\"text\",\"value\":\"\\n\"},{\"type\":\"element\",\"tagName\":\"p\",\"properties\":{},\"children\":[{\"type\":\"text\",\"value\":\"當初 IBM 及微軟內部第一次在推動 DevOps 改造時就是發生在協作軟件的部門（Lotus Notes and MS Office），也正是 Google 的 Gmail[2] 等快速地被企業及個人採用後，兩家公司發現當他們還在以每季度在更新軟件時，Google 卻是每天都能更版甚至使用 A/B Testing 的方法在快速反應使用者的回饋。 結果是 MS Office 轉型後且上了雲端似乎帶來更好的結果，但 IBM 卻退出了企業協作軟件的市場 …。\"}]},{\"type\":\"text\",\"value\":\"\\n\"},{\"type\":\"element\",\"tagName\":\"blockquote\",\"properties\":{},\"children\":[{\"type\":\"text\",\"value\":\"\\n\"},{\"type\":\"element\",\"tagName\":\"p\",\"properties\":{},\"children\":[{\"type\":\"text\",\"value\":\"快速變動的行業裡，大家早就應該了解到，沒有改變的風險跟改變本身的風險是一樣高的！\"}]},{\"type\":\"text\",\"value\":\"\\n\"}]},{\"type\":\"text\",\"value\":\"\\n\"},{\"type\":\"element\",\"tagName\":\"p\",\"properties\":{},\"children\":[{\"type\":\"text\",\"value\":\"從十年前的第一場DevOpsDays, Belgium, 2009，到傳統軟體公司想改變時已經是將近五年後的事，但在DevOps滿十年後的今天，你，想要變了嗎？當共享軟体當道，商業模式容易被複製，只要灑錢暫時也能雇用到不錯的工程師，所以長遠來看，企業的差異性與競爭力大概就只剩下企業文化與效率。\"}]}],\"data\":{\"quirksMode\":false}},\"fields\":{\"slug\":\"/devops-why-n-how/\",\"prefix\":\"2019-12-17\"},\"frontmatter\":{\"title\":\"DevOps十年了，你，想改變了嗎？\",\"subTitle\":\"DevOps Why & How\",\"cover\":{\"childImageSharp\":{\"resize\":{\"src\":\"/static/Shfit_left_right-cover-e68ec076c43288ed22ceb7397d5e1d29-160fa.png\"}}}}},\"author\":{\"id\":\"/Users/liubryan/Library/Mobile Documents/com~apple~CloudDocs/sharing/bryanPFLiu.github.io/content/parts/author.md absPath of file >>> MarkdownRemark\",\"html\":\"<p><strong>Mr. Liu</strong>’s <a href=\\\"/\\\">home</a> 💖:</p>\\n<h2>前言</h2>\\n<p>把想法寫出來，其實想了很久…，總是覺得網路上已有這麼多好文可以看，為何還需要再多寫，況且寫了後又有多少人要看呢？心中想講的東西，其實在現實上認同且願意實踐者少之又少。\\n最初的想法還是希望這些東西對於社群能有些貢獻跟正面的影響罷了，所以最後堅定自己的道路與想法來自於葛拉漢（Benjamin Graham）的名言：『是對是錯，跟他人是否認同一點關係也沒有，你的對錯只跟你的資料和邏輯推理是否正確有關。』</p>\\n<blockquote>\\n<p>卓越，是一種選擇。</p>\\n</blockquote>\\n<p>《從 A 到 A ＋》書的結尾說到：『做到卓越不見得比做到優秀困難，反而可以少吃點苦頭，累積的動能會注入更多的能量，持續維持在平庸將不斷耗掉能量，新注入的能量卻很少。』\\n這的確也是寫在後面的一些方法論實踐後所帶來的感想，這些技巧都是那些卓越公司（Facebook、Amazon、Netflix、Google 和 Microsoft 等）所注重的，但在一般的公司卻認為可有可無：反正我這樣做還是可以交付成果！殊不知這中間的效率差了多倍有餘，或許這也是獨角獸與馬匹的差異吧～</p>\"},\"footnote\":{\"id\":\"/Users/liubryan/Library/Mobile Documents/com~apple~CloudDocs/sharing/bryanPFLiu.github.io/content/parts/footnote.md absPath of file >>> MarkdownRemark\",\"html\":\"\"},\"site\":{\"siteMetadata\":{\"facebook\":{\"appId\":\"2767463339978769\"}}}},\"pathContext\":{\"slug\":\"/devops-why-n-how/\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/devops-why-n-how.json\n// module id = 779\n// module chunks = 2988873844765"],"sourceRoot":""}